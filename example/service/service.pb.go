// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/service.proto

package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LoginReq struct {
	Username             string   `protobuf:"bytes,1,opt,name=Username,json=username,proto3" json:"Username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=Password,json=password,proto3" json:"Password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginReq) Reset()         { *m = LoginReq{} }
func (m *LoginReq) String() string { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()    {}
func (*LoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_c0b13aea53bd240d, []int{0}
}
func (m *LoginReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginReq.Unmarshal(m, b)
}
func (m *LoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginReq.Marshal(b, m, deterministic)
}
func (dst *LoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginReq.Merge(dst, src)
}
func (m *LoginReq) XXX_Size() int {
	return xxx_messageInfo_LoginReq.Size(m)
}
func (m *LoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginReq proto.InternalMessageInfo

func (m *LoginReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type Token struct {
	Value                string   `protobuf:"bytes,1,opt,name=Value,json=value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_c0b13aea53bd240d, []int{1}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token.Unmarshal(m, b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token.Marshal(b, m, deterministic)
}
func (dst *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(dst, src)
}
func (m *Token) XXX_Size() int {
	return xxx_messageInfo_Token.Size(m)
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type LogoutRsp struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=Msg,json=msg,proto3" json:"Msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogoutRsp) Reset()         { *m = LogoutRsp{} }
func (m *LogoutRsp) String() string { return proto.CompactTextString(m) }
func (*LogoutRsp) ProtoMessage()    {}
func (*LogoutRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_c0b13aea53bd240d, []int{2}
}
func (m *LogoutRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogoutRsp.Unmarshal(m, b)
}
func (m *LogoutRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogoutRsp.Marshal(b, m, deterministic)
}
func (dst *LogoutRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutRsp.Merge(dst, src)
}
func (m *LogoutRsp) XXX_Size() int {
	return xxx_messageInfo_LogoutRsp.Size(m)
}
func (m *LogoutRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutRsp proto.InternalMessageInfo

func (m *LogoutRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type TrackReq struct {
	Lng                  float64  `protobuf:"fixed64,1,opt,name=Lng,json=lng,proto3" json:"Lng,omitempty"`
	Lat                  float64  `protobuf:"fixed64,2,opt,name=Lat,json=lat,proto3" json:"Lat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackReq) Reset()         { *m = TrackReq{} }
func (m *TrackReq) String() string { return proto.CompactTextString(m) }
func (*TrackReq) ProtoMessage()    {}
func (*TrackReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_c0b13aea53bd240d, []int{3}
}
func (m *TrackReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackReq.Unmarshal(m, b)
}
func (m *TrackReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackReq.Marshal(b, m, deterministic)
}
func (dst *TrackReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackReq.Merge(dst, src)
}
func (m *TrackReq) XXX_Size() int {
	return xxx_messageInfo_TrackReq.Size(m)
}
func (m *TrackReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackReq.DiscardUnknown(m)
}

var xxx_messageInfo_TrackReq proto.InternalMessageInfo

func (m *TrackReq) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func (m *TrackReq) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

type TrackRsp struct {
	Count                uint32   `protobuf:"varint,1,opt,name=Count,json=count,proto3" json:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackRsp) Reset()         { *m = TrackRsp{} }
func (m *TrackRsp) String() string { return proto.CompactTextString(m) }
func (*TrackRsp) ProtoMessage()    {}
func (*TrackRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_c0b13aea53bd240d, []int{4}
}
func (m *TrackRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackRsp.Unmarshal(m, b)
}
func (m *TrackRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackRsp.Marshal(b, m, deterministic)
}
func (dst *TrackRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackRsp.Merge(dst, src)
}
func (m *TrackRsp) XXX_Size() int {
	return xxx_messageInfo_TrackRsp.Size(m)
}
func (m *TrackRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackRsp.DiscardUnknown(m)
}

var xxx_messageInfo_TrackRsp proto.InternalMessageInfo

func (m *TrackRsp) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type EventsReq struct {
	Filter               string   `protobuf:"bytes,1,opt,name=Filter,json=filter,proto3" json:"Filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventsReq) Reset()         { *m = EventsReq{} }
func (m *EventsReq) String() string { return proto.CompactTextString(m) }
func (*EventsReq) ProtoMessage()    {}
func (*EventsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_c0b13aea53bd240d, []int{5}
}
func (m *EventsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventsReq.Unmarshal(m, b)
}
func (m *EventsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventsReq.Marshal(b, m, deterministic)
}
func (dst *EventsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventsReq.Merge(dst, src)
}
func (m *EventsReq) XXX_Size() int {
	return xxx_messageInfo_EventsReq.Size(m)
}
func (m *EventsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EventsReq.DiscardUnknown(m)
}

var xxx_messageInfo_EventsReq proto.InternalMessageInfo

func (m *EventsReq) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type EventsRsp struct {
	Event                string   `protobuf:"bytes,1,opt,name=Event,json=event,proto3" json:"Event,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventsRsp) Reset()         { *m = EventsRsp{} }
func (m *EventsRsp) String() string { return proto.CompactTextString(m) }
func (*EventsRsp) ProtoMessage()    {}
func (*EventsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_c0b13aea53bd240d, []int{6}
}
func (m *EventsRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventsRsp.Unmarshal(m, b)
}
func (m *EventsRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventsRsp.Marshal(b, m, deterministic)
}
func (dst *EventsRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventsRsp.Merge(dst, src)
}
func (m *EventsRsp) XXX_Size() int {
	return xxx_messageInfo_EventsRsp.Size(m)
}
func (m *EventsRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_EventsRsp.DiscardUnknown(m)
}

var xxx_messageInfo_EventsRsp proto.InternalMessageInfo

func (m *EventsRsp) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

type Message struct {
	Text                 string   `protobuf:"bytes,1,opt,name=Text,json=text,proto3" json:"Text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_c0b13aea53bd240d, []int{7}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*LoginReq)(nil), "service.LoginReq")
	proto.RegisterType((*Token)(nil), "service.Token")
	proto.RegisterType((*LogoutRsp)(nil), "service.LogoutRsp")
	proto.RegisterType((*TrackReq)(nil), "service.TrackReq")
	proto.RegisterType((*TrackRsp)(nil), "service.TrackRsp")
	proto.RegisterType((*EventsReq)(nil), "service.EventsReq")
	proto.RegisterType((*EventsRsp)(nil), "service.EventsRsp")
	proto.RegisterType((*Message)(nil), "service.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TrackerClient is the client API for Tracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrackerClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*Token, error)
	Logout(ctx context.Context, in *Token, opts ...grpc.CallOption) (*LogoutRsp, error)
	Track(ctx context.Context, opts ...grpc.CallOption) (Tracker_TrackClient, error)
	Events(ctx context.Context, in *EventsReq, opts ...grpc.CallOption) (Tracker_EventsClient, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (Tracker_ChatClient, error)
}

type trackerClient struct {
	cc *grpc.ClientConn
}

func NewTrackerClient(cc *grpc.ClientConn) TrackerClient {
	return &trackerClient{cc}
}

func (c *trackerClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/service.Tracker/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) Logout(ctx context.Context, in *Token, opts ...grpc.CallOption) (*LogoutRsp, error) {
	out := new(LogoutRsp)
	err := c.cc.Invoke(ctx, "/service.Tracker/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) Track(ctx context.Context, opts ...grpc.CallOption) (Tracker_TrackClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tracker_serviceDesc.Streams[0], "/service.Tracker/Track", opts...)
	if err != nil {
		return nil, err
	}
	x := &trackerTrackClient{stream}
	return x, nil
}

type Tracker_TrackClient interface {
	Send(*TrackReq) error
	CloseAndRecv() (*TrackRsp, error)
	grpc.ClientStream
}

type trackerTrackClient struct {
	grpc.ClientStream
}

func (x *trackerTrackClient) Send(m *TrackReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *trackerTrackClient) CloseAndRecv() (*TrackRsp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TrackRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trackerClient) Events(ctx context.Context, in *EventsReq, opts ...grpc.CallOption) (Tracker_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tracker_serviceDesc.Streams[1], "/service.Tracker/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &trackerEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tracker_EventsClient interface {
	Recv() (*EventsRsp, error)
	grpc.ClientStream
}

type trackerEventsClient struct {
	grpc.ClientStream
}

func (x *trackerEventsClient) Recv() (*EventsRsp, error) {
	m := new(EventsRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trackerClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Tracker_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tracker_serviceDesc.Streams[2], "/service.Tracker/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &trackerChatClient{stream}
	return x, nil
}

type Tracker_ChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type trackerChatClient struct {
	grpc.ClientStream
}

func (x *trackerChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *trackerChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TrackerServer is the server API for Tracker service.
type TrackerServer interface {
	Login(context.Context, *LoginReq) (*Token, error)
	Logout(context.Context, *Token) (*LogoutRsp, error)
	Track(Tracker_TrackServer) error
	Events(*EventsReq, Tracker_EventsServer) error
	Chat(Tracker_ChatServer) error
}

func RegisterTrackerServer(s *grpc.Server, srv TrackerServer) {
	s.RegisterService(&_Tracker_serviceDesc, srv)
}

func _Tracker_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Tracker/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Tracker/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).Logout(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_Track_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrackerServer).Track(&trackerTrackServer{stream})
}

type Tracker_TrackServer interface {
	SendAndClose(*TrackRsp) error
	Recv() (*TrackReq, error)
	grpc.ServerStream
}

type trackerTrackServer struct {
	grpc.ServerStream
}

func (x *trackerTrackServer) SendAndClose(m *TrackRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *trackerTrackServer) Recv() (*TrackReq, error) {
	m := new(TrackReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Tracker_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrackerServer).Events(m, &trackerEventsServer{stream})
}

type Tracker_EventsServer interface {
	Send(*EventsRsp) error
	grpc.ServerStream
}

type trackerEventsServer struct {
	grpc.ServerStream
}

func (x *trackerEventsServer) Send(m *EventsRsp) error {
	return x.ServerStream.SendMsg(m)
}

func _Tracker_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrackerServer).Chat(&trackerChatServer{stream})
}

type Tracker_ChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type trackerChatServer struct {
	grpc.ServerStream
}

func (x *trackerChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *trackerChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Tracker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Tracker",
	HandlerType: (*TrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Tracker_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Tracker_Logout_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Track",
			Handler:       _Tracker_Track_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Events",
			Handler:       _Tracker_Events_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _Tracker_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service/service.proto",
}

func init() { proto.RegisterFile("service/service.proto", fileDescriptor_service_c0b13aea53bd240d) }

var fileDescriptor_service_c0b13aea53bd240d = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0x5f, 0x4f, 0xf2, 0x30,
	0x14, 0xc6, 0xd3, 0x77, 0x6c, 0x8c, 0x93, 0xbc, 0x06, 0x4f, 0xd4, 0x90, 0x25, 0x24, 0x58, 0x6f,
	0x88, 0x31, 0x83, 0xe0, 0x37, 0x90, 0xe8, 0x15, 0x24, 0x66, 0x41, 0xef, 0x2b, 0x1e, 0x27, 0x01,
	0xd6, 0xb9, 0x76, 0xc8, 0x47, 0xf7, 0xd2, 0xb4, 0xeb, 0x26, 0x81, 0xab, 0xe5, 0x79, 0x9e, 0xf3,
	0xaf, 0xbf, 0x0c, 0x2e, 0x15, 0x15, 0xbb, 0xd5, 0x92, 0x46, 0xee, 0x1b, 0xe7, 0x85, 0xd4, 0x12,
	0xdb, 0x4e, 0xf2, 0x07, 0x08, 0x67, 0x32, 0x5d, 0x65, 0x09, 0x7d, 0x61, 0x04, 0xe1, 0x8b, 0xa2,
	0x22, 0x13, 0x5b, 0xea, 0xb1, 0x01, 0x1b, 0x76, 0x92, 0xb0, 0x74, 0xda, 0x64, 0xcf, 0x42, 0xa9,
	0x6f, 0x59, 0xbc, 0xf7, 0xfe, 0x55, 0x59, 0xee, 0x34, 0xef, 0x83, 0xbf, 0x90, 0x6b, 0xca, 0xf0,
	0x02, 0xfc, 0x57, 0xb1, 0x29, 0xeb, 0x6e, 0x7f, 0x67, 0x04, 0xef, 0x43, 0x67, 0x26, 0x53, 0x59,
	0xea, 0x44, 0xe5, 0xd8, 0x05, 0x6f, 0xae, 0x52, 0x57, 0xe0, 0x6d, 0x55, 0xca, 0x63, 0x08, 0x17,
	0x85, 0x58, 0xae, 0xcd, 0x05, 0x5d, 0xf0, 0x66, 0x59, 0x95, 0xb2, 0xc4, 0xdb, 0x64, 0xa9, 0x75,
	0x84, 0xb6, 0x2b, 0x8d, 0x23, 0x34, 0x1f, 0xd4, 0xf5, 0x2a, 0x37, 0x0b, 0xa7, 0xb2, 0xcc, 0xb4,
	0xed, 0xf8, 0x9f, 0xf8, 0x4b, 0x23, 0xf8, 0x0d, 0x74, 0x1e, 0x77, 0x94, 0x69, 0x65, 0x46, 0x5e,
	0x41, 0xf0, 0xb4, 0xda, 0x68, 0x2a, 0xdc, 0xce, 0xe0, 0xc3, 0x2a, 0x7e, 0xdd, 0x14, 0x55, 0x73,
	0xac, 0xa8, 0x0f, 0x27, 0x23, 0x78, 0x1f, 0xda, 0x73, 0x52, 0x4a, 0xa4, 0x84, 0x08, 0xad, 0x05,
	0xed, 0xeb, 0xbc, 0xa5, 0x69, 0xaf, 0x27, 0x3f, 0x0c, 0xda, 0xf6, 0x12, 0x2a, 0xf0, 0x16, 0x7c,
	0x8b, 0x11, 0xcf, 0xe3, 0x1a, 0x74, 0x8d, 0x35, 0x3a, 0x6b, 0xac, 0x8a, 0xd2, 0x1d, 0x04, 0x15,
	0x0f, 0x3c, 0x4a, 0x22, 0x3c, 0x6c, 0x76, 0xc0, 0x46, 0xe0, 0xdb, 0x25, 0x07, 0x93, 0x6b, 0x5c,
	0xd1, 0xb1, 0xa5, 0xf2, 0x21, 0xc3, 0x09, 0x04, 0xd5, 0xc3, 0xf0, 0x6f, 0x5c, 0x83, 0x23, 0x3a,
	0xf1, 0x54, 0x3e, 0x66, 0x18, 0x43, 0x6b, 0xfa, 0x29, 0x34, 0x76, 0x9b, 0xd4, 0x3d, 0x3c, 0x3a,
	0x71, 0x86, 0x6c, 0xcc, 0xde, 0x02, 0xfb, 0x17, 0xdd, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xec,
	0x0f, 0x25, 0x53, 0x5e, 0x02, 0x00, 0x00,
}
